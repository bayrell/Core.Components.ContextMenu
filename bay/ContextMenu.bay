/*!
 *  Bayrell Core Library
 *
 *  (c) Copyright 2018-2019 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
 
namespace Core.Components.ContextMenu;

use Core.Annotations.BindValue;
use Core.Annotations.Event;
use Core.UI.Events.MouseEvent.MouseClickEvent;
use Core.UI.Events.MouseEvent.MouseContextMenuEvent;
use Core.UI.Events.MouseEvent.MouseDoubleClickEvent;
use Core.UI.Component;
use Core.UI.PocketModel;
use Core.Components.ContextMenu.ContextMenuEvent;
use Core.Components.ContextMenu.ContextMenuModel;


class ContextMenu extends Component
{
	
	public ContextMenuModel model = null;
	
	
	
	/**
	 * Returns model name
	 */
	lambda string modelName() => classof ContextMenuModel;
	
	
	
	/**
	 * Component css
	 */
	lambda string css(Dict<string> vars) => 
		@css{
			%contextmenu{
				position: fixed;
				background-color: white;
				border: 1px #ccc solid;
				z-index: 100;
			}
			%contextmenu_item{
				-webkit-user-select: none;
				-moz-user-select: none;
				-khtml-user-select: none;
				-ms-user-select: none;
				cursor: pointer;
			}
			%contextmenu_item:hover{
				background-color: #eaeaea;
			}
			%contextmenu_item_icon, %contextmenu_item_label{
				display: inline-block;
				vertical-align: top;
				padding: 5px;
			}
			%contextmenu_item_icon{
				width: 25px;
				text-align: center;
			}
			%contextmenu_item_label{
				width: calc(100% - 25px);
			}
		}
	;
	
	
	
	/**
	 * Component render
	 * @param ContextMenuModel data
	 * @param Collection<UIStruct> children
	 * @param Dict<primitive> props
	 */
	lambda Collection<UIStruct> render(ContextMenuModel data, UIStruct ui, PocketModel pocket)
	{
		Dict<string> style = {
			'display': data.is_active ? 'block' : 'none',
			'top': data.y ~ 'px',
			'left': data.x ~ 'px',
		};
		return <div @class='contextmenu' @style={ style }>
			{ static::renderChildren(ui.children) }
		</div>;
	}
	
	
	
	/**
	 * Component render
	 * @param ContextMenuModel data
	 * @param Collection<UIStruct> children
	 * @param Dict<primitive> props
	 */
	lambda Collection<UIStruct> renderChildren(Collection<UIStruct> children)
	{
		return children.map( 
			
			Collection<UIStruct> (UIStruct item)
			{
				string tag = item.props ? item.props.get("@tag", "") : "";
				string icon = item.props ? item.props.get("icon", "") : "";
				return 
					<div @class='contextmenu_item' @tag={ tag } data-tag={ tag } 
						@annotations=[
							new Event{ "event": classof MouseClickEvent, "method_name": "onItemClick" }
						]
					>
						<div @class='contextmenu_item_icon'>
							<span class={ item.props ? item.props.get("icon", "") : "" }></span>
						</div>
						<div @class='contextmenu_item_label'>{ item.children }</div>
					</div>
				;
			}
			
		);
	}
	
	
	
	
	
	/* ---------------------------------- Events ----------------------------------- */
	
	
	/**
	 * Show context menu
	 */
	public void show(int x, int y, mixed tag = null)
	{
		this.setModel
		(
			this.model.show
			(
				x,
				y,
				tag
			)
		);
	}
	
	
	
	/**
	 * Hide context menu
	 */
	public void hide()
	{
		this.setModel
		(
			this.model.hide()
		);
	}
	
	
	
	/**
	 * Event item click
	 */
	public void onItemClick(UIEvent<MouseClickEvent> e)
	{
		/* Set new value */
		string tag = e.vdom.props.get("@tag");
		this.signalOut( new ContextMenuEvent{ "tag": tag, "event": e.event, "item": this.model.tag } );
	}
	
	
}
